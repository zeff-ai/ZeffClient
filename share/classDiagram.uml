
@startuml


' =========================================================================== 

namespace ZeffClient {

	class RecordUploader {
	}

	class Reporter {
		generated(record)
		validate_success(record)
		validate_warning(record)
		validate_error(record)
		submit_success(record)
		submit_error(record)
	}

	class LoggingReporter {
		__init__(logging.Logger)
	}
	Reporter <|-- LoggingReporter
}


' =========================================================================== 

namespace ZeffClient.Record {
	class Record {
		name: String
		void validate()
		void submit()
	}
	Record "1" *-- "0..*" StructuredData
	Record "1" *-- "0..*" UnstructuredData

	class StructuredData {
	}
	StructuredData "1" *-- "0..*" StructuredDataItem : items

	class StructuredDataItem {
		name: String
		value: Bytes
		data_type: (continuous, discrete)
		target:
	}


	class UnstructuredData {
	}
	UnstructuredData "1" *-- "0..*" UnstructuredDataItem : items

	class UnstructuredDataItem {
		data: URI
		media_type: RFC2046
		group_by: String
	}
}


' =========================================================================== 

namespace ZeffClient.TemporalRecord {
	class TemporalRecord {
		name: String
		windowSize: duration
		void validate()
		void submit()
	}
	TemporalRecord "0..*" o-- "1..*" File : files
	TemporalRecord "1" *-- "0..*" Events : event_sets
	'TemporalRecord "1" *-- "0..*" FileContext : contexts
	TemporalRecord "1" *-- "0..*" StructuredData
	TemporalRecord "1" *-- "0..*" UnstructuredData

	class File {
		data: URI
		media_type: RFC2046
		group_by: String
	}

	class Events {
	}
	Events "1" *-- "0..*" Event 

	class Event {
		name: String
		value: Bytes
		start: Period
		end: Period
	}

	class FileContext {
	}
	File "1" - "1" Events
	(File, Events) .. FileContext

	class StructuredData {
	}
	StructuredData "1" *-- "0..*" StructuredDataItem : items

	class StructuredDataItem {
		name: String
		value: Bytes
		data_type: (continuous, discrete)
	}

	class UnstructuredData {
	}
	UnstructuredData "1" *-- "0..*" UnstructuredDataItem : items

	class UnstructuredDataItem {
		data: URI
		media_type: RFC2046
		group_by: String
	}
}


' =========================================================================== 

namespace ZeffClient.RecordGenerator {
	class RecordGenerator {
	}

	class MultiprocessingRecordGenerator {
	}
}


' =========================================================================== 

namespace ZeffClient.RestClient {
	class RecordQueue <<queue.Queue>> {
	}
	RecordQueue --> ZeffServer : server

	class ZeffServer {
	}
	ZeffServer "1" *-- "0..*" ZeffConnection : connection_pool

	class ZeffConnection <<http.HTTPSConnection>> {
	}
}


@enduml
